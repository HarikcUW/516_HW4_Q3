/************ data model **************/
.type PersonType <: symbol
.type DescriptionType <: symbol

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
// NOTE: if you want to redirect the output to a file
// you can use the syntax:
.output p0(filename="hw4-q3-0.ans")
//.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

/************* Copy this file to the submission directory          **************/
/************* then write your solutions to questions 1 - 5 below  **************/

/************* problem 1 **************/
/**** Find all descendants of Priscilla and their descriptions ****/
.decl descendants(p:PersonType, pd:PersonType)
//.output descendants(IO=stdout)
descendants(x,y) :- parent_child(x,y).
descendants(x,z) :- descendants(x,y),parent_child(y,z).

.decl p1(p:PersonType, pde:DescriptionType)
.output p1(filename="hw4-q3-1.ans")
//.output p1(IO=stdout)
p1(pd,d) :- descendants("Priscilla",pd),person(pd,d).

/************* problem 2 **************/
/**** Find the woman/women with the largest number of children and the man/men with the largest number of children ****/

.decl maleChildrenCount(p:PersonType,  n:number)
maleChildrenCount(x,c) :- male(x),parent_child(x,_),c = count : { parent_child(x,_)}.

.decl femaleChildrenCount(p:PersonType,  n:number)
femaleChildrenCount(x,c) :- female(x),parent_child(x,_),c = count : { parent_child(x,_)}.

.decl maxMaleChildrenCount(p:PersonType, n: number)
//maxMaleChildrenCount(x,maxN) :- maxN = max n:{maleChildrenCount(x,n)}.
maxMaleChildrenCount(x,maxN) :- mn= max n:{maleChildrenCount(_,n)}, maleChildrenCount(x,maxN), maxN=mn.

.decl maxFemaleChildrenCount(p:PersonType, n: number)
//maxFemaleChildrenCount(x,maxN) :- maxN = max n:{femaleChildrenCount(x,n)}.
maxFemaleChildrenCount(x,maxN) :- mn= max n:{femaleChildrenCount(_,n)}, femaleChildrenCount(x,maxN), maxN=mn.

.decl p2(p:PersonType, d:DescriptionType, n: number)
.output p2(filename="hw4-q3-2.ans")
//.output p2(IO=stdout)
p2(x,d,n) :- maxMaleChildrenCount(x,n),person(x,d).
p2(x,d,n) :- maxFemaleChildrenCount(x,n),person(x,d).

/************* problem 3 **************/
/**** Compute the minimum and maximum generation of each living person  ****/

.decl generation(p:PersonType, g:number)
generation(x,g) :- parent_child(x,_), !parent_child(_,x), g=0.
generation(y,g+1) :- generation(x,g), parent_child(x,y).

.decl p3(x:PersonType, m1:number, m2:number)
.output p3(filename="hw4-q3-3.ans")
//.output p3(IO=stdout)
p3(pl,minc,maxc) :- person_living(pl), minc = min n:{generation(pl,n)}, maxc = max n:{generation(pl,n)}.

/************* problem 4 **************/
/**** Compute all matrilineal common ancestors, MCA  ****/

.decl femaleParent(x:PersonType, y:PersonType)
femaleParent(x,y) :- person_living(y),female(y),parent_child(x,y), female(x).
femaleParent(z,x) :- femaleParent(x,_), parent_child(z,x),female(z).

.decl femaleParentGeneration(p:PersonType, g:number)
femaleParentGeneration(x,g) :- femaleParent(x,_), !femaleParent(_,x), g=0.
femaleParentGeneration(y,g+1) :- femaleParentGeneration(x,g), femaleParent(x,y).

.decl femaleParentGenerationWith1Parent(g:number, c:number)
//.output femaleParentGenerationWith1Parent(IO=stdout)
femaleParentGenerationWith1Parent(g,c) :- femaleParentGeneration(_,g),c = count : { femaleParentGeneration(_,g)}.

.decl p4(p:PersonType)
//.output p4(IO=stdout)
.output p4(filename="hw4-q3-4.ans")
p4(x) :- m1 = min g : {femaleParentGenerationWith1Parent(g,c), c = 2 }, femaleParentGeneration(x,g1), g1 < m1.

/************* problem 5 **************/
/**** Find the mitochondrial Eve  ****/
.decl p5(p:PersonType)
//.output p5(IO=stdout)
.output p5(filename="hw4-q3-5.ans")
p5(y) :- femaleParent(x,y), !femaleParent(_,x).

